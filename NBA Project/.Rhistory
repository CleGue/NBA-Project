for(j in 2:length(colonne)){
indice<-which(clust_play$part[ind]==colonne[j])
indice
if(length(indice)==0){
elem<-0
}else{
elem<-as.integer(clust_play$n[ind[indice]])
}
vect<-cbind(vect,elem)
}
nodata<-rbind(nodata,vect)
}
colnames(nodata)<-colonne
for(i in 2:(nb_cluster+1)){
nodata[,i]<-as.integer(nodata[,i])
}
return(nodata)
}
teams<-teams[,c(2,5)]
ma_home<-aggregate(. ~ TEAM_ID_home + SEASON,games[,c(6,7:13)] , mean)
ec_home<-aggregate(. ~ TEAM_ID_home + SEASON,games[,c(6:7,15:20)] , mean)
colnames(ma_home)<-c("Team","Year","pts_ma","FG_PCT_ma","FT_PCT_ma","FG3_PCT_ma","AST_ma","REB_ma")
colnames(ec_home)<-c("Team","Year","pts_ec","FG_PCT_ec","FT_PCT_ec","FG3_PCT_ec","AST_ec","REB_ec")
ma_away<-aggregate(. ~ TEAM_ID_away + SEASON,games[,c(6,14:20)] , mean)
ec_away<-aggregate(. ~ TEAM_ID_away + SEASON,games[,c(6,8:14)] , mean)
colnames(ma_away)<-c("Team","Year","pts_ma","FG_PCT_ma","FT_PCT_ma","FG3_PCT_ma","AST_ma","REB_ma")
colnames(ec_away)<-c("Team","Year","pts_ec","FG_PCT_ec","FT_PCT_ec","FG3_PCT_ec","AST_ec","REB_ec")
ma<-rbind(ma_home,ma_away)
ec<-rbind(ec_home,ec_away)
ma<-aggregate(. ~ Team + Year,ma, mean)
ec<-aggregate(. ~ Team + Year,ec , mean)
team_pa<- merge(ma, ec, by.x=c("Team","Year"),by.y=c("Team","Year"))
team<-merge(team_pa, teams, by.x=c("Team"),by.y=c("TEAM_ID"))
team$Team<-team$ABBREVIATION
team<-team[,-15]
season_stats_age<-season_statsMVP[which(season_statsMVP$Age<41),]
age<-aggregate(. ~ Age,season_stats_age[,c(12,13,14,24,25,23,42,46)] , mean)
library(plyr)
age<-rename(age,
c("Age"="Age",
"pts"="Points",
"reb"="Rebonds",
"ast"="Passes",
"G"="Matches",
"MP"="Minutes",
"WS/48"="Impact Victoire",
"BPM"="Note du joueur"
)
)
detach("package:plyr", unload=TRUE)
age<-as.data.frame(age)
data_age_draft<-season_statsMVP
data_age_draft<- data_age_draft %>%
filter(!is.na(draft_year))
data_age_draft$Nb_year_played<-(as.integer(data_age_draft$Year)-as.integer(data_age_draft$draft_year))
library(plyr)
data_age_draft<-rename(data_age_draft,
c("Age"="Age",
"Nb_year_played"="Nombre d'annees en NBA",
"pts"="Points",
"reb"="Rebonds",
"ast"="Passes",
"G"="Matches",
"MP"="Minutes",
"WS/48"="Impact Victoire",
"BPM"="Note du joueur",
"NB"="Note du joueur"
)
)
detach("package:plyr", unload=TRUE)
data_age_draft<-as.data.frame(data_age_draft)
data_age_draft2<-aggregate(. ~ Age + `Nombre d'annees en NBA`,data_age_draft[,c(12,13,14,24,25,23,42,46,49)] , mean)
season_stats_age_quantile<-season_statsMVP[which(season_statsMVP$Age<41),]
t_age_2<-aggregate(. ~ Age,season_stats_age_quantile[,c(12,13,14,24,25,23,42,46)],FUN=quantile,probs=0.1)
t_age_2<-plyr::rename(t_age_2,
c("Age"="Age","pts"="Points","reb"="Rebonds","ast"="Passes","G"="Matches","MP"="Minutes",
"WS/48"="Impact Victoire","BPM"="Note du joueur"))
t_age_2<-as.data.frame(t_age_2)
t_age_3<-aggregate(. ~ Age,season_stats_age_quantile[,c(12,13,14,24,25,23,42,46)],FUN=quantile,probs=0.25)
t_age_3<-plyr::rename(t_age_3,
c("Age"="Age","pts"="Points","reb"="Rebonds","ast"="Passes","G"="Matches","MP"="Minutes",
"WS/48"="Impact Victoire","BPM"="Note du joueur"))
t_age_3<-as.data.frame(t_age_3)
t_age_4<-aggregate(. ~ Age,season_stats_age_quantile[,c(12,13,14,24,25,23,42,46)],FUN=quantile,probs=0.75)
t_age_4<-plyr::rename(t_age_4,
c("Age"="Age","pts"="Points","reb"="Rebonds","ast"="Passes","G"="Matches","MP"="Minutes",
"WS/48"="Impact Victoire","BPM"="Note du joueur"))
t_age_4<-as.data.frame(t_age_4)
t_age_5<-aggregate(. ~ Age,season_stats_age_quantile[,c(12,13,14,24,25,23,42,46)],FUN=quantile,probs=0.9)
t_age_5<-plyr::rename(t_age_5,
c("Age"="Age","pts"="Points","reb"="Rebonds","ast"="Passes","G"="Matches","MP"="Minutes",
"WS/48"="Impact Victoire","BPM"="Note du joueur"))
t_age_5<-as.data.frame(t_age_5)
library(plyr)
stats_players<-season_statsMVP[,c(1,2,3,5,6,12,13,14,22,24,25,42,46)]
stats_players<-rename(stats_players,
c("player_name"="Joueur",
"Year"="Annee",
"team_abbreviation"="Equipe",
"player_height"="Taille",
"player_weight"="Poids",
"pts"="Points",
"reb"="Rebonds",
"ast"="Passes",
"Pos"="Poste",
"G"="Matches",
"MP"="Minutes",
"WS/48"="Impact Victoire",
"BPM"="Note du joueur"
)
)
stats_players<-stats_players[,c("Joueur",
"Annee",
"Equipe",
"Poste",
"Taille",
"Poids",
"Points",
"Rebonds",
"Passes",
"Matches",
"Minutes",
"Impact Victoire",
"Note du joueur")]
stats_players$Taille<-round(stats_players$Taille,0)
stats_players$Poids<-round(stats_players$Poids,0)
detach("package:plyr", unload=TRUE)
df<-plyr::count(season_statsMVP$country)
df<-df[which(df$freq>50),1]
country_list<-as.vector(df)
ind<-which(season_statsMVP$country %in% country_list)
season_stats_country<-season_statsMVP[ind,]
season_stats_country2<-season_statsMVP
season_stats_country2$country[which(season_statsMVP$country!="USA")]<-"Other"
country_prop<-prop.table(table(season_stats_country2$Year,season_stats_country2$country),1)
country_prop<-as.data.frame(country_prop)
country_prop<-rename(country_prop,
c("Annee"="Var1",
"Pays"="Var2",
"Prop"="Freq"
)
)
country_prop2<-country_prop[which(country_prop$Pays=="Other"),c(3)]
time_ser2=ts(country_prop2,frequency=1,start=c(1997))
fit2<-auto.arima(
time_ser2,
stationary = FALSE,
seasonal = FALSE
)
MVPtot <- data.frame("MVP reel"=character(),
"Annee"=character(),
"MVP predit"=character(),
"MVP_knn"=character(),
"MVP_LDA"=character(),
"MVP_NB"=character(),
"Same"=character(),
"Same2"=character(),
"Same3"=character(),
"Same4"=character())
line=1
#init
season_statsMVP2<-season_statsMVP[,-c(5,6,38,43)]
season_statsMVP2<-na.omit(season_statsMVP2)
Xkeep<-season_statsMVP2[,4]
season_statsMVP2<-season_statsMVP2[,-4]
for(i in unique(season_statsMVP$Year)){
indice<-which(season_statsMVP2$Year!=i)
Xkeeptest<-Xkeep[-indice]
X<-season_statsMVP2[,-c(43)]
Year<-X$Year[-indice]
Player<-X$player_name[-indice]
nums <- unlist(lapply(X, is.numeric))
Y<-season_statsMVP2[,43]
#RF
Xtrain<-X[indice,]
Xtest<-X[-indice,]
Ytrain<-Y[indice]
Ytest<-Y[-indice]
#knn et lda
X_knn<-X[ , nums]
X_knn<-scale(X_knn, center = TRUE, scale = TRUE)
Xtrain_knn<-X_knn[indice,]
Xtest_knn<-X_knn[-indice,]
#NB
data<-cbind(X_knn,Y)
data<-as.data.frame(data)
datatrain<-data[indice,]
Xtest_nb<-as.data.frame(Xtest_knn[-indice,])
#### Processing ####
#rf
rf<-randomForest(ntree=5,x=Xtrain,y=as.factor(Ytrain))
pred<-predict(rf,Xtest,type="prob")
MVPtest<-cbind(Xtest,pred)
MVPtest<-cbind(MVPtest,Xkeeptest)
#knn
pred_test<-class::knn(Xtrain_knn, Xtest_knn, as.factor(Ytrain), k=51,prob=TRUE)
R1<-as.numeric(attr(pred_test,"prob"))
MVPtest_knn<-cbind(Player,Xtest_knn)
MVPtest_knn<-cbind(MVPtest_knn,R1)
MVPtest_knn<-cbind(MVPtest_knn,Year)
MVPtest_knn<-cbind(MVPtest_knn,Xkeeptest)
MVPtest_knn<-as.data.frame(MVPtest_knn)
#LDA
g_lda<-lda(Xtrain_knn,grouping = as.factor(Ytrain))
pred_test_lda<-predict(g_lda,Xtest_knn)$posterior
MVPtest_lda<-cbind(Player,Xtest_knn)
MVPtest_lda<-cbind(MVPtest_lda,pred_test_lda)
MVPtest_lda<-cbind(MVPtest_lda,Year)
MVPtest_lda<-cbind(MVPtest_lda,Xkeeptest)
MVPtest_lda<-as.data.frame(MVPtest_lda)
#Naive Bayes
g_naive <- naiveBayes(as.factor(Y) ~ ., data = datatrain)
pred_test_nb<-predict(g_naive, Xtest_knn, type = "raw")
score_bayes <-pred_test_nb[,2]
MVPtest_nb<-cbind(Player,Xtest_knn)
MVPtest_nb<-cbind(MVPtest_nb,pred_test_nb)
MVPtest_nb<-cbind(MVPtest_nb,Year)
MVPtest_nb<-cbind(MVPtest_nb,Xkeeptest)
MVPtest_nb<-as.data.frame(MVPtest_nb)
#### Prediction ####
year<-unique(MVPtest$Year)
ind<-c()
#RF
for (i in year){
indyear<-MVPtest$X[which(MVPtest$Year==i)]
maxi<-max(MVPtest$"1"[which(MVPtest$X %in% indyear & MVPtest$MP>100)])
indexX<-MVPtest$X[which(MVPtest$"1"==maxi & MVPtest$Year==i)]
ind<-cbind(ind,indexX)
}
MVPpred<-MVPtest[which(MVPtest$X %in% ind),c(1,2,44)]
MVPpred<-MVPpred[order(MVPpred$Year),]
#KNN
ind_knn<-c()
for (i in year){
#indyear<-MVPtest_knn$Xkeeptest[which(MVPtest_knn$Year==i)]
###attention
indyear<-MVPtest_knn$Xkeeptest[which(MVPtest_knn$Year==i & MVPtest$MP>100)]
mini<-min(MVPtest_knn$R1[which(MVPtest_knn$Xkeeptest %in% indyear)])
indexX<-MVPtest_knn$Xkeeptest[which(MVPtest_knn$R1==mini & MVPtest_knn$Year==i)]
ind_knn<-cbind(ind_knn,indexX)
}
MVPpred_knn<-MVPtest_knn[which(MVPtest_knn$Xkeeptest %in% ind_knn),c(1,35,36)]
MVPpred_knn<-MVPpred_knn[order(MVPpred_knn$Year),]
#LDA
ind_lda<-c()
for (i in year){
indyear<-MVPtest_lda$Xkeeptest[which(MVPtest_lda$Year==i & MVPtest$MP>100)]
mini<-min(MVPtest_lda$"1"[which(MVPtest_lda$Xkeeptest %in% indyear)])
indexX<-MVPtest_lda$Xkeeptest[which(MVPtest_lda$"1"==mini & MVPtest_lda$Year==i)]
ind_lda<-cbind(ind_lda,indexX)
}
MVPpred_lda<-MVPtest_lda[which(MVPtest_lda$Xkeeptest %in% ind_lda),c(1,36,37)]
MVPpred_lda<-MVPpred_lda[order(MVPpred_lda$Year),]
#NB
ind_nb<-c()
for (i in year){
indyear<-MVPtest_nb$Xkeeptest[which(MVPtest_nb$Year==i & MVPtest$MP>100)]
maxi<-min(MVPtest_nb$"1"[which(MVPtest_nb$Xkeeptest %in% indyear)])
indexX<-MVPtest_nb$Xkeeptest[which(MVPtest_nb$"1"==maxi & MVPtest_nb$Year==i)]
ind_nb<-cbind(ind_nb,indexX)
}
MVPpred_nb<-MVPtest_nb[which(MVPtest_nb$Xkeeptest %in% ind_nb),c(1,36,37)]
MVPpred_nb<-MVPpred_nb[order(MVPpred_nb$Year),]
#### Vrai MVP ####
ind<-c()
for (i in year){
indyear<-season_statsMVP$X1[which(season_statsMVP$Year==i)]
maxi<-max(season_statsMVP$MVP_number[which(season_statsMVP$X1 %in% indyear)])
indexX<-season_statsMVP$X1[which(season_statsMVP$MVP_number==maxi &season_statsMVP$Year==i)]
ind<-cbind(ind,indexX)
}
MVPtrue<-season_statsMVP[which(season_statsMVP$X1 %in% ind),c(1,2)]
MVPtrue<-MVPtrue[order(MVPtrue$Year),]
#### Creation table a afficher ####
MVPtoprint<-merge(MVPpred,MVPtrue,by.x="Year",by.y="Year")
MVPtoprint<-plyr::rename(MVPtoprint,c("player_name.x"="MVP predit",
"Year"="Annee","player_name.y"="MVP reel"
))
MVPtoprint2<-merge(MVPtoprint,MVPpred_knn,by.x = "Annee",by.y="Year")
MVPtoprint2<-plyr::rename(MVPtoprint2,c("MVP predit"="MVP predit",
"Annee"="Annee","MVP reel"="MVP reel","Player"="MVP_knn"
))
MVPtoprint3<-merge(MVPtoprint2,MVPpred_lda,by.x = "Annee",by.y="Year")
MVPtoprint3<-plyr::rename(MVPtoprint3,c("MVP predit"="MVP predit",
"Annee"="Annee","MVP reel"="MVP reel","MVP_knn"="MVP_knn","Player"="MVP_LDA"
))
MVPtoprint4<-merge(MVPtoprint3,MVPpred_nb,by.x = "Annee",by.y="Year")
MVPtoprint4<-plyr::rename(MVPtoprint4,c("MVP predit"="MVP predit",
"Annee"="Annee","MVP reel"="MVP reel","MVP_knn"="MVP_knn","MVP_LDA"="MVP_LDA","Player"="MVP_NB"
))
MVPtoprint4<-MVPtoprint4[,c("MVP reel", "Annee","MVP predit","MVP_knn","MVP_LDA","MVP_NB")]
MVPtoprint4$Same<-as.numeric(MVPtoprint4$Annee)
MVPtoprint4$Same[which(MVPtoprint4$`MVP reel`==MVPtoprint4$`MVP predit`)]<-1
MVPtoprint4$Same[which(MVPtoprint4$`MVP reel`!=MVPtoprint4$`MVP predit`)]<-0
MVPtoprint4$Same2<-as.numeric(MVPtoprint4$Annee)
MVPtoprint4$Same2[which(MVPtoprint4$`MVP reel`==MVPtoprint4$`MVP_knn`)]<-1
MVPtoprint4$Same2[which(MVPtoprint4$`MVP reel`!=MVPtoprint4$`MVP_knn`)]<-0
MVPtoprint4$Same3<-as.numeric(MVPtoprint4$Annee)
MVPtoprint4$Same3[which(MVPtoprint4$`MVP reel`==MVPtoprint4$`MVP_LDA`)]<-1
MVPtoprint4$Same3[which(MVPtoprint4$`MVP reel`!=MVPtoprint4$`MVP_LDA`)]<-0
MVPtoprint4$Same4<-as.numeric(MVPtoprint4$Annee)
MVPtoprint4$Same4[which(MVPtoprint4$`MVP reel`==MVPtoprint4$`MVP_NB`)]<-1
MVPtoprint4$Same4[which(MVPtoprint4$`MVP reel`!=MVPtoprint4$`MVP_NB`)]<-0
MVPtot[line,]<-MVPtoprint4
line=line+1
}
MVPtot<-MVPtot[order(MVPtot$Annee,decreasing = TRUE),]
MVPtot<-plyr::rename(MVPtot,c("MVP.predit"="MVP RF",
"Annee"="Annee","MVP.reel"="MVP reel","MVP_knn"="MVP knn","MVP_LDA"="MVP LDA","MVP_NB"="MVP NB"
))
indice<-which(season_stats2$Year>2000)
season_stats_acp<-season_stats2[indice,]
season_stats_acp<-season_stats_acp[,-c(1,8,14:20,22,27,32,33,35,36,38,39,42,43)]
season_stats_acp[,c(26:34)]<-round(season_stats_acp[,c(26:34)]/season_stats_acp$G,2)
indic_30G<-which(season_stats_acp$G>30)
season_stats_acp<-season_stats_acp[indic_30G,]
seasons <- read_csv("all_seasons.csv")
seasons$Year<-paste(substr(seasons$season,start=1,stop=2),substr(seasons$season,start=6,stop=7),sep="")
seasons$Year[which(seasons$Year==1900)]<-2000
seasons<-seasons[,c(2,5,6,23)]
seasons$player_name<-gsub("\\*", "",seasons$player_name)
season_stats_acp$Player<-gsub("\\*", "",season_stats_acp$Player)
season_stats_acp_indic<-season_stats_acp[,c(2,13:20)]
season_stats_acp_indic
season_stats_PCA<-merge(season_stats_acp, seasons, by.x=c("Year","Player"),by.y=c("Year","player_name"),all.x=TRUE)
season_stats_PCA$Tm<-initiale(season_stats_PCA$Tm)
rankingschamp <- data.frame()
for (i in seq(1977,2019)){
ranking<- read.csv(paste(paste("nba-models-master/season-standings/",i,sep=""),".csv",sep=""))
if (i<1999){
ranking<-ranking[,1:15]
ranking<-ranking[,-c(8,9,10,11,12,13)]
}
else if (i==1999){
ranking<-ranking[,1:13]
ranking<-ranking[,-c(8,9,10,11)]
}
else if(i<2005){
ranking<-ranking[,1:15]
ranking<-ranking[,-c(8,9,10,11,12,13)]
}
else if(i>=2005){
ranking<-ranking[,1:17]
ranking<-ranking[,-c(8,9,10,11,12,13,14,15)]
}
ranking$Year<-i
rankingschamp<-rbind(rankingschamp,ranking)
}
for (i in seq(1,nrow(rankingschamp))){
rankingschamp$Overall[i]<-as.numeric(str_split(rankingschamp$Overall[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$Overall[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$Overall[i], "-")[[1]][1]))
rankingschamp$Home[i]<-as.numeric(str_split(rankingschamp$Home[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$Home[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$Home[i], "-")[[1]][1]))
rankingschamp$Road[i]<-as.numeric(str_split(rankingschamp$Road[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$Road[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$Road[i], "-")[[1]][1]))
rankingschamp$X3[i]<-as.numeric(str_split(rankingschamp$X3[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$X3[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$X3[i], "-")[[1]][1]))
rankingschamp$X10[i]<-as.numeric(str_split(rankingschamp$X10[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$X10[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$X10[i], "-")[[1]][1]))
rankingschamp$E[i]<-as.numeric(str_split(rankingschamp$E[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$E[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$E[i], "-")[[1]][1]))
rankingschamp$W[i]<-as.numeric(str_split(rankingschamp$W[i], "-")[[1]][1])/(as.numeric(str_split(rankingschamp$W[i], "-")[[1]][2])+as.numeric(str_split(rankingschamp$W[i], "-")[[1]][1]))
}
champions <- read_excel("NBA Finals and MVP.xlsx")
champions<-champions[,c(1,5)]
rankingschamp<-merge(rankingschamp,champions,by.x=c("Year"),by.y=c("Year"))
rankingschamp$Champ<-0
for (i in seq(1,nrow(rankingschamp))){
if(rankingschamp$Team[i]==rankingschamp$`NBA Champion`[i]){
rankingschamp$Champ[i]<-1
}
}
Champtot <- data.frame("Champion reel"=character(),
"Annee"=character(),
"Champion predit"=character(),
"Same"=character())
line=1
rankingschamp<-rankingschamp[which(rankingschamp$Year>1980),]
for(i in unique(rankingschamp$Year)){
indice<-which(rankingschamp$Year!=i)
X<-rankingschamp[,-c(11,12)]
Y<-rankingschamp[,12]
Xtrain<-X[indice,]
Xtest<-X[-indice,]
Ytrain<-Y[indice]
Ytest<-Y[-indice]
#Prediction
rf<-randomForest(x=Xtrain,y=as.factor(Ytrain))
pred<-predict(rf,Xtest,type="prob")
champtest<-cbind(Xtest,pred)
year<-unique(champtest$Year)
ind<-c()
index=0
for (i in year){
indyear<-which(champtest$Year==i)
ind<-cbind(ind,index+which.max(champtest$"1"[indyear]))
index=index+length(indyear)
}
#### VRAi champ ####
Champtrue<-rankingschamp[which(rankingschamp$Year==i & rankingschamp$Champ==1),c(1,3)]
Champtrue
Champtoprint<-merge(Champtrue,champtest[ind,c(1,3)],by.x="Year",by.y="Year")
Champtoprint
Champtoprint$Same<-as.numeric(Champtoprint$Year)
Champtoprint
Champtoprint$Same[which(Champtoprint$`Team.x`==Champtoprint$`Team.y`)]<-1
Champtoprint$Same[which(Champtoprint$`Team.x`!=Champtoprint$`Team.y`)]<-0
Champtot[line,]<-Champtoprint
line<-line+1
}
Champtot<-Champtot[,c("Annee","Champion.reel","Champion.predit","Same")]
Champtot<-plyr::rename(Champtot,c("Annee"="Champion reel","Champion.reel"="Annee","Champion.predit"="Champion predit","Same"="Same"))
Champtot<-Champtot[order(Champtot$Annee,decreasing = TRUE),]
table_met<-data.frame(Variables = c("BPM","OBPM","DBPM","WS","OWS","DWS","WS/48","PER"),
Signification = c("Box Plus-Minus","Offensive BPM","Defensive BPM","Win Share","Offensive WS","Defensive WS","Win Share /48 Minutes","Player Efficiency Rating"),
Explication = c("Metrique avancee de la qualité","Metrique avancee de la qualite offensive","Metrique avancee de la qualite defensive","Participation a la victoire","Participation a la victoire offensive","Participation a la victoire defensive","Participation à la victoire sur 48 minutes","Efficacite du joueur"),
Type=c("Les deux","Offensive","Defensive","Les deux","Offensive","Defensive","Les deux","Les deux"))
table_play<-data.frame(Variables=colnames(season_stats_PCA)[-c(1:5,8,13:20)],
Signification = c("Games","Minutes Played","True Shooting Percentage","X3PAr","Ftr","Usage Percentage","Field Goal Percentage","3-Point Field Goal %","2-Point Field Goals %","Effective Field Goal Percentage",
"Free Throws Percentage","Offensive Rebounds","Defensive Rebounds","Total Rebounds","Assists","Steels","Blocks","Turnovers","Personal Fouls","Points","Height","Weight"),
Explication = c("Matchs joues","Minutes jouees","Pourcentage reussite tirs","Pourcentage 3-points tentes","Pourcentage lancer franc tentes","Pourcentage de ballons touches","Pourcentage de tirs marques","Pourcentage 3-points marques","Pourcentage 2-points marques","Pourcentage de tirs effectifs marques",
"Pourcentage lancer franc marques","Rebonds offensifs","Rebonds défensifs","TRB","Assists","Steel","Block","TOV","PF","Points","Taille","Poids")
)
table_team<-data.frame(Variables = c("BPM","OBPM","DBPM","OWS","DWS","WS","WS/48","PER","VORP"),
Signification = c("Basketball Box Score-Based Metric","Offensive BPM","Defensive BPM","Offensive WS","Defensive WS","Win Share","Win Share /48","Player Efficiency Rating","Value Over Replacement Player"),
Explication = c("nul","nul","nul","nul","nul","nul","nul","nul","nul"),
Type=c("All","Offensive","Defensive","Offensive","Defensive","All","All","All","All"))
# Team traitement #
team_st<-team
team_st$Team<-initiale_to_name(team_st$Team)
ind_t_st<-which(team_st$Year<2020)
team_st<-team_st[ind_t_st,]
ind_r4<-which(rankings3$Year>2002)
rankings4<-rankings3[ind_r4,]
strong_team<-merge(team_st,rankings4,by.x=c("Year","Team"),by.y=c("Year","team_name"))
years_clust<-c(unique(as.character(sort(team$Year))))
shiny::runApp()
runApp()
strong_team
View(strong_team)
runApp()
s_tp2<-season_stats_PCA[,-c(6,7,10)]
ind<-which(s_tp2$Year==2016)
s_tp2<-s_tp2[ind,]
n_tp2 <- nrow(s_tp2)
Z_tp2 <- scale(s_tp2[,-c(1:3,5)], center=TRUE,scale=TRUE)*sqrt(n_tp2/(n_tp2-1))
d_tp2 <- dist(Z_tp2)
tree_tp2 <- hclust(d_tp2^2/(2*n_tp2), method="ward.D") #les individus sont pondérés par 1/n
K_l3 <- 4
part <- cutree(tree_tp2,k=K_l3)
part <- as.factor(part)
levels(part) <- paste("cluster",1:K_l3,sep="")
s_tp2_all<-cbind(part,s_tp2)
nodata_tp2<-build_array(s_tp2_all,4)
team_lien2<-team
team_lien2<-aggregate(. ~ Team,team_lien2[,-2] , mean)
if(input$seas_tp!="toutes les années"){
ind<-which(team$Year==input$seas_tp)
team_lien2<-team[ind,]
}
team_2_bis<-merge(nodata_tp2, team_lien2, by.x=c("Team"),by.y=c("Team"))
n4_bis <- nrow(team_2_bis)
Z4_bis <- scale(team_2_bis[,-1], center=TRUE,scale=TRUE)*sqrt(n4_bis/(n4_bis-1))
d4_bis <- dist(Z4_bis)
tree_tp2_bis <- hclust(d4_bis^2/(2*n4_bis), method="ward.D") #les individus sont pondérés par 1/n
K_l5 <- 4
part_l5 <- cutree(tree_tp2_bis,k=K_l5)
part_l5 <- as.factor(part_l5)
levels(part_l5) <- paste("cluster",1:K_l5,sep="")
desc_l5 <- catdes(data.frame(part_l5,team_2_bis),
num.var=1)
plot(desc_l5,barplot=TRUE)
team_2_bis
runApp()
runApp()
es deux
l
install.packages('rsconnect')
rsconnect::setAccountInfo(name='guerinclement',
token='F4CF1827B2CACA80D4D0716A30AFDFF5',
secret='cMCjmdZwmASd/4+7555illo2QtvfGczOQ22ym/e7')
runApp()
runApp()
install.packages("pcsl")
runApp()
install.packages("pscl")
library(pscl)
library(readxl)
library(readr)
library(dplyr)
library(plsgenomics)
library(mlbench)
library(e1071)
library(klaR)
library(MASS)
library(class)
library(glmnet)
library(ROCR)
library(randomForest)
library(readr)
library(ggplot2)
library(scales)
library(plotly)
library(lubridate)
library(tidyr)
library(gridExtra)
library(FactoMineR)
library(stringr)
library(forecast)
library(tseries)
library(MASS)
library(cowplot)
library(dendextend)
library(pscl)
runApp()
runApp()
runApp()
runApp()
